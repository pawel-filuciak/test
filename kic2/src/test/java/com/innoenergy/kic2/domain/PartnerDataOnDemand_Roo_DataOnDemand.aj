// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package com.innoenergy.kic2.domain;

import com.innoenergy.kic2.domain.KicUnitDataOnDemand;
import com.innoenergy.kic2.domain.OrganizationTypeDataOnDemand;
import com.innoenergy.kic2.domain.Partner;
import com.innoenergy.kic2.domain.PartnerDataOnDemand;
import com.innoenergy.kic2.domain.TradeStyleDataOnDemand;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect PartnerDataOnDemand_Roo_DataOnDemand {
    
    declare @type: PartnerDataOnDemand: @Component;
    
    private Random PartnerDataOnDemand.rnd = new SecureRandom();
    
    private List<Partner> PartnerDataOnDemand.data;
    
    @Autowired
    private KicUnitDataOnDemand PartnerDataOnDemand.kicUnitDataOnDemand;
    
    @Autowired
    private OrganizationTypeDataOnDemand PartnerDataOnDemand.organizationTypeDataOnDemand;
    
    @Autowired
    private TradeStyleDataOnDemand PartnerDataOnDemand.tradeStyleDataOnDemand;
    
    public Partner PartnerDataOnDemand.getNewTransientPartner(int index) {
        Partner obj = new Partner();
        setCfs(obj, index);
        setComment(obj, index);
        setDeclarationOfHonour(obj, index);
        setDunsNumber(obj, index);
        setEitNumber(obj, index);
        setEligibilityDate(obj, index);
        setEligibleForEIT(obj, index);
        setFullName(obj, index);
        setGpaSigned(obj, index);
        setIndirectCostPercentage(obj, index);
        setInternalAgreement(obj, index);
        setLegalInformationForm(obj, index);
        setOfficialName(obj, index);
        setOfficialNameEnglish(obj, index);
        setPic(obj, index);
        setShareHolder(obj, index);
        setShortName(obj, index);
        setVatNumber(obj, index);
        return obj;
    }
    
    public void PartnerDataOnDemand.setCfs(Partner obj, int index) {
        Boolean cfs = Boolean.TRUE;
        obj.setCfs(cfs);
    }
    
    public void PartnerDataOnDemand.setComment(Partner obj, int index) {
        String comment = "comment_" + index;
        if (comment.length() > 500) {
            comment = comment.substring(0, 500);
        }
        obj.setComment(comment);
    }
    
    public void PartnerDataOnDemand.setDeclarationOfHonour(Partner obj, int index) {
        Boolean declarationOfHonour = Boolean.TRUE;
        obj.setDeclarationOfHonour(declarationOfHonour);
    }
    
    public void PartnerDataOnDemand.setDunsNumber(Partner obj, int index) {
        String dunsNumber = "dunsNumber_" + index;
        if (dunsNumber.length() > 100) {
            dunsNumber = dunsNumber.substring(0, 100);
        }
        obj.setDunsNumber(dunsNumber);
    }
    
    public void PartnerDataOnDemand.setEitNumber(Partner obj, int index) {
        String eitNumber = "eitNumber_" + index;
        if (eitNumber.length() > 100) {
            eitNumber = eitNumber.substring(0, 100);
        }
        obj.setEitNumber(eitNumber);
    }
    
    public void PartnerDataOnDemand.setEligibilityDate(Partner obj, int index) {
        Calendar eligibilityDate = Calendar.getInstance();
        obj.setEligibilityDate(eligibilityDate);
    }
    
    public void PartnerDataOnDemand.setEligibleForEIT(Partner obj, int index) {
        Boolean eligibleForEIT = Boolean.TRUE;
        obj.setEligibleForEIT(eligibleForEIT);
    }
    
    public void PartnerDataOnDemand.setFullName(Partner obj, int index) {
        String fullName = "fullName_" + index;
        if (fullName.length() > 200) {
            fullName = fullName.substring(0, 200);
        }
        obj.setFullName(fullName);
    }
    
    public void PartnerDataOnDemand.setGpaSigned(Partner obj, int index) {
        Boolean gpaSigned = Boolean.TRUE;
        obj.setGpaSigned(gpaSigned);
    }
    
    public void PartnerDataOnDemand.setIndirectCostPercentage(Partner obj, int index) {
        Double indirectCostPercentage = new Integer(index).doubleValue();
        obj.setIndirectCostPercentage(indirectCostPercentage);
    }
    
    public void PartnerDataOnDemand.setInternalAgreement(Partner obj, int index) {
        Boolean internalAgreement = Boolean.TRUE;
        obj.setInternalAgreement(internalAgreement);
    }
    
    public void PartnerDataOnDemand.setLegalInformationForm(Partner obj, int index) {
        Boolean legalInformationForm = Boolean.TRUE;
        obj.setLegalInformationForm(legalInformationForm);
    }
    
    public void PartnerDataOnDemand.setOfficialName(Partner obj, int index) {
        String officialName = "officialName_" + index;
        if (officialName.length() > 200) {
            officialName = officialName.substring(0, 200);
        }
        obj.setOfficialName(officialName);
    }
    
    public void PartnerDataOnDemand.setOfficialNameEnglish(Partner obj, int index) {
        String officialNameEnglish = "officialNameEnglish_" + index;
        if (officialNameEnglish.length() > 200) {
            officialNameEnglish = officialNameEnglish.substring(0, 200);
        }
        obj.setOfficialNameEnglish(officialNameEnglish);
    }
    
    public void PartnerDataOnDemand.setPic(Partner obj, int index) {
        String pic = "pic_" + index;
        if (pic.length() > 100) {
            pic = pic.substring(0, 100);
        }
        obj.setPic(pic);
    }
    
    public void PartnerDataOnDemand.setShareHolder(Partner obj, int index) {
        Boolean shareHolder = Boolean.TRUE;
        obj.setShareHolder(shareHolder);
    }
    
    public void PartnerDataOnDemand.setShortName(Partner obj, int index) {
        String shortName = "shortName_" + index;
        if (shortName.length() > 100) {
            shortName = shortName.substring(0, 100);
        }
        obj.setShortName(shortName);
    }
    
    public void PartnerDataOnDemand.setVatNumber(Partner obj, int index) {
        String vatNumber = "vatNumber_" + index;
        if (vatNumber.length() > 50) {
            vatNumber = vatNumber.substring(0, 50);
        }
        obj.setVatNumber(vatNumber);
    }
    
    public Partner PartnerDataOnDemand.getSpecificPartner(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Partner obj = data.get(index);
        Long id = obj.getId();
        return Partner.findPartner(id);
    }
    
    public Partner PartnerDataOnDemand.getRandomPartner() {
        init();
        Partner obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Partner.findPartner(id);
    }
    
    public boolean PartnerDataOnDemand.modifyPartner(Partner obj) {
        return false;
    }
    
    public void PartnerDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Partner.findPartnerEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Partner' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Partner>();
        for (int i = 0; i < 10; i++) {
            Partner obj = getNewTransientPartner(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
